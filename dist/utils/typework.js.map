{"version":3,"file":"typework.js","names":["_toString","Object","prototype","toString","getType","obj","exec","call","exports","isFn","Function","name","protoChain","object","undefined","chain","getPrototypeOf","current","push","results","map","c","constructor","filter","defineProperties","isa","value","type","derived","includes","actual","get","evalOrBust","o","eval","revert"],"sources":["../../src/utils/typework.js"],"sourcesContent":["// @ts-check\n\n// Internal shorthand for the magic toString() function\nconst _toString = Object.prototype.toString\n\n/**\n * Leverages JavaScript's internal type system which can be accessed by\n * either using `call` or `apply` on the `Object.prototype.toString`\n * function.\n *\n * @param {mixed} obj - any object or value\n *\n * @return {string} the name of the class or function used for the type\n * of object internally. Note that while null and undefined have actual\n * types internally there is no accessible `Null` or `Undefined` class\n */\nexport const getType = obj => /t (\\w+)/.exec(_toString.call(obj))?.[1]\n\n/**\n * Fetches the internal type of the object in question and then returns\n * true if that is literally equivalent to `Function.name`\n *\n * @param {mixed} obj - any object or value\n *\n * @returns {boolean}  - true if the internal type of the object matches\n * `Function.name`\n */\nexport const isFn = obj => Function.name === getType(obj)\n\n/**\n * Given an input of any type, `protoChain` constructs an array representing\n * the prototype chain of the input. This array consists of constructor names\n * for each type in the chain. The resulting array also includes a non-standard\n * `isa` method that checks if a given constructor name is part of the chain.\n * Additionally, an `actual` getter is defined to attempt evaluation of the\n * prototype chain names to their actual type references, where possible.\n *\n * @flow\n * @param {mixed} object - The input value for which the prototype chain is\n * desired.\n * @returns {string[] & { isa: Function, actual: Array<any> }} An\n * array of constructor names with appended `isa` method and `actual` getter.\n *\n * @note The `isa` method allows checking if a given type name is in the\n * prototype chain. The `actual` getter attempts to convert type names back\n * to their evaluated types.\n */\nexport function protoChain(object) {\n  if (object === null || object === undefined) { return [getType(object)] }\n\n  let chain = [ Object.getPrototypeOf(object) ]\n  let current = chain[0]\n\n  while(current != null) {\n    current = Object.getPrototypeOf(current)\n    chain.push(current)\n  }\n\n  const results = chain\n    .map(c => c?.constructor?.name || c)\n    .filter(c => !!c)\n\n  Object.defineProperties(results, {\n    isa: {\n      value: function isa(type) {\n        let derived = getType(type)\n        switch(derived) {\n          case [Function.name]:\n            derived = type.name\n            break\n          default:\n            break\n        }\n\n        return (\n          this.includes(derived) ||\n          type?.name && this.includes(type.name)\n        )\n      }\n    },\n\n    actual: {\n      get: function() {\n        let evalOrBust = o => { try { return (eval(o)) } catch { return o } }\n        let revert = o => {\n          switch(o) {\n            case 'Null': return null\n            case 'Undefined': return undefined\n            default: return o\n        }}\n        return this.map(revert).map(evalOrBust)\n      }\n    }\n  })\n\n  return results\n}\n"],"mappings":";;;;;;;AAAA;;AAEA;AACA,MAAMA,SAAS,GAAGC,MAAM,CAACC,SAAS,CAACC,QAAQ;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMC,OAAO,GAAGC,GAAG,IAAI,SAAS,CAACC,IAAI,CAACN,SAAS,CAACO,IAAI,CAACF,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;;AAEtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARAG,OAAA,CAAAJ,OAAA,GAAAA,OAAA;AASO,MAAMK,IAAI,GAAGJ,GAAG,IAAIK,QAAQ,CAACC,IAAI,KAAKP,OAAO,CAACC,GAAG,CAAC;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBAG,OAAA,CAAAC,IAAA,GAAAA,IAAA;AAkBO,SAASG,UAAUA,CAACC,MAAM,EAAE;EACjC,IAAIA,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAKC,SAAS,EAAE;IAAE,OAAO,CAACV,OAAO,CAACS,MAAM,CAAC,CAAC;EAAC;EAExE,IAAIE,KAAK,GAAG,CAAEd,MAAM,CAACe,cAAc,CAACH,MAAM,CAAC,CAAE;EAC7C,IAAII,OAAO,GAAGF,KAAK,CAAC,CAAC,CAAC;EAEtB,OAAME,OAAO,IAAI,IAAI,EAAE;IACrBA,OAAO,GAAGhB,MAAM,CAACe,cAAc,CAACC,OAAO,CAAC;IACxCF,KAAK,CAACG,IAAI,CAACD,OAAO,CAAC;EACrB;EAEA,MAAME,OAAO,GAAGJ,KAAK,CAClBK,GAAG,CAACC,CAAC,IAAIA,CAAC,EAAEC,WAAW,EAAEX,IAAI,IAAIU,CAAC,CAAC,CACnCE,MAAM,CAACF,CAAC,IAAI,CAAC,CAACA,CAAC,CAAC;EAEnBpB,MAAM,CAACuB,gBAAgB,CAACL,OAAO,EAAE;IAC/BM,GAAG,EAAE;MACHC,KAAK,EAAE,SAASD,GAAGA,CAACE,IAAI,EAAE;QACxB,IAAIC,OAAO,GAAGxB,OAAO,CAACuB,IAAI,CAAC;QAC3B,QAAOC,OAAO;UACZ,KAAK,CAAClB,QAAQ,CAACC,IAAI,CAAC;YAClBiB,OAAO,GAAGD,IAAI,CAAChB,IAAI;YACnB;UACF;YACE;QACJ;QAEA,OACE,IAAI,CAACkB,QAAQ,CAACD,OAAO,CAAC,IACtBD,IAAI,EAAEhB,IAAI,IAAI,IAAI,CAACkB,QAAQ,CAACF,IAAI,CAAChB,IAAI,CAAC;MAE1C;IACF,CAAC;IAEDmB,MAAM,EAAE;MACNC,GAAG,EAAE,SAAAA,CAAA,EAAW;QACd,IAAIC,UAAU,GAAGC,CAAC,IAAI;UAAE,IAAI;YAAE,OAAQC,IAAI,CAACD,CAAC,CAAC;UAAE,CAAC,CAAC,MAAM;YAAE,OAAOA,CAAC;UAAC;QAAE,CAAC;QACrE,IAAIE,MAAM,GAAGF,CAAC,IAAI;UAChB,QAAOA,CAAC;YACN,KAAK,MAAM;cAAE,OAAO,IAAI;YACxB,KAAK,WAAW;cAAE,OAAOnB,SAAS;YAClC;cAAS,OAAOmB,CAAC;UACrB;QAAC,CAAC;QACF,OAAO,IAAI,CAACb,GAAG,CAACe,MAAM,CAAC,CAACf,GAAG,CAACY,UAAU,CAAC;MACzC;IACF;EACF,CAAC,CAAC;EAEF,OAAOb,OAAO;AAChB","ignoreList":[]}