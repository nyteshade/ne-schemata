"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.RESOLVE_TYPE = exports.IS_TYPE_OF = exports.FIELD_DESCRIPTIONS = exports.DESCRIPTION = void 0;
exports.extractResolverInfo = extractResolverInfo;
var _typework = require("./typework");
// @ts-check

/**
 * This constant type when applied to a ResolverMap object, will be picked up
 * by `extractResolverInfo` and be applied to the type on the executableSchema
 * type's `isTypeOf` property
 *
 * @type {Symbol}
 */
const IS_TYPE_OF = exports.IS_TYPE_OF = Symbol.for('Resolver.isTypeOf');

/**
 * This constant type when applied to a ResolverMap object, will be picked up
 * by `extractResolverInfo` and be applied to the type on the executableSchema
 * type's `resolveType` property
 *
 * @type {Symbol}
 */
const RESOLVE_TYPE = exports.RESOLVE_TYPE = Symbol.for('Resolver.resolveType');

/**
 * A programmatic way to define a description outside of SDL. This is handy
 * when provided as a getter on the schema's type object. The getter gets invoked
 * each time the description field is accessed allowing dynamic content to be
 * presented instead of static content. Note that long running function work
 * here can slow down all items viewing the description
 *
 * @type {Symbol}
 */
const DESCRIPTION = exports.DESCRIPTION = Symbol.for('Resolver.description');

/**
 * Unlike `DESCRIPTION` which defines the description of the type, this symbol
 * should always point to an object whose keys are the field names and whose
 * values are the descriptions. String constant values will be converted to a
 * function that returns the constant.
 *
 * @type {Symbol}
 */
const FIELD_DESCRIPTIONS = exports.FIELD_DESCRIPTIONS = Symbol.for('Resolver.fieldDescriptions');

/**
 * Walks a resolvers object and returns an array of objects with specific properties.
 *
 * @param {ResolverMap} resolvers - The resolvers object to walk.
 * @param {boolean} [deleteFields=false] - Whether to delete fields that are collected.
 * @returns {ResolverInfo[]} - The array of objects with specified properties.
 */
function extractResolverInfo(resolvers, deleteFields = false) {
  const result = [];
  for (const [type, resolver] of Object.entries(resolvers)) {
    const item = {
      type
    };
    let include = false;

    // Check for isTypeOf or __isTypeOf function
    if (resolver[IS_TYPE_OF] || resolver.__isTypeOf) {
      item.isTypeOf = resolver[IS_TYPE_OF] || resolver.__isTypeOf;
      include = true;
      if (deleteFields) {
        delete resolver[IS_TYPE_OF];
        delete resolver.__isTypeOf;
      }
    }

    // Check for resolveType or __resolveType function
    if (resolver[RESOLVE_TYPE] || resolver.__resolveType) {
      item.resolveType = resolver[RESOLVE_TYPE] || resolver.__resolveType;
      include = true;
      if (deleteFields) {
        delete resolver[RESOLVE_TYPE];
        delete resolver.__resolveType;
      }
    }

    // Check for description field
    if (resolver[DESCRIPTION]) {
      item.description = typeof resolver[DESCRIPTION] === 'string' ? () => resolver[DESCRIPTION] : resolver[DESCRIPTION];
      include = true;
      if (deleteFields) {
        delete resolver[DESCRIPTION];
      }
    }

    // Check for the field descriptions field
    if (resolver[FIELD_DESCRIPTIONS] && (0, _typework.protoChain)(resolver[FIELD_DESCRIPTIONS]).isa(Object)) {
      item.fieldDescriptions = resolver[FIELD_DESCRIPTIONS];
      include = true;
      if (deleteFields) {
        delete resolver[FIELD_DESCRIPTIONS];
      }
    }

    // Only add item to result if it has more than just the type property
    if (include) {
      item.applyTo = function applyTo(schema, overwrite = false) {
        if (Reflect.has(schema._typeMap, this.type)) {
          let {
            resolveType,
            isTypeOf,
            description,
            fieldDescriptions
          } = this;
          let type = schema._typeMap[this.type];
          if (resolveType && Reflect.has(type, 'resolveType')) {
            if (!type.resolveType || overwrite) {
              type.resolveType = resolveType;
            }
          }
          if (isTypeOf && Reflect.has(type, 'isTypeOf')) {
            if (!type.isTypeOf || overwrite) {
              type.isTypeOf = isTypeOf;
            }
          }
          if (description && Reflect.has(type, 'description')) {
            if (!type.description || overwrite) {
              Object.defineProperty(type, 'description', {
                get: description,
                configurable: true,
                enumerable: true
              });
            }
          }
          if (fieldDescriptions && Reflect.has(type, '_fields')) {
            Object.entries(fieldDescriptions).forEach(([field, description]) => {
              if (!type._fields[field]?.description || overwrite) {
                const getter = (0, _typework.protoChain)(description).isa(Function) ? description : () => description;
                Object.defineProperty(type._fields[field], 'description', {
                  get: getter,
                  configurable: true,
                  enumerable: true
                });
              }
            });
          }
        }
      };
      result.push(item);
    }
  }
  if (result.length) {
    result.applyTo = function applyTo(schema, overwrite = false) {
      result.forEach(info => info.applyTo(schema, overwrite));
    };
  }
  return result;
}
var _default = exports.default = extractResolverInfo;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdHlwZXdvcmsiLCJyZXF1aXJlIiwiSVNfVFlQRV9PRiIsImV4cG9ydHMiLCJTeW1ib2wiLCJmb3IiLCJSRVNPTFZFX1RZUEUiLCJERVNDUklQVElPTiIsIkZJRUxEX0RFU0NSSVBUSU9OUyIsImV4dHJhY3RSZXNvbHZlckluZm8iLCJyZXNvbHZlcnMiLCJkZWxldGVGaWVsZHMiLCJyZXN1bHQiLCJ0eXBlIiwicmVzb2x2ZXIiLCJPYmplY3QiLCJlbnRyaWVzIiwiaXRlbSIsImluY2x1ZGUiLCJfX2lzVHlwZU9mIiwiaXNUeXBlT2YiLCJfX3Jlc29sdmVUeXBlIiwicmVzb2x2ZVR5cGUiLCJkZXNjcmlwdGlvbiIsInByb3RvQ2hhaW4iLCJpc2EiLCJmaWVsZERlc2NyaXB0aW9ucyIsImFwcGx5VG8iLCJzY2hlbWEiLCJvdmVyd3JpdGUiLCJSZWZsZWN0IiwiaGFzIiwiX3R5cGVNYXAiLCJkZWZpbmVQcm9wZXJ0eSIsImdldCIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJmb3JFYWNoIiwiZmllbGQiLCJfZmllbGRzIiwiZ2V0dGVyIiwiRnVuY3Rpb24iLCJwdXNoIiwibGVuZ3RoIiwiaW5mbyIsIl9kZWZhdWx0IiwiZGVmYXVsdCJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9yZXNvbHZlcndvcmsuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQHRzLWNoZWNrXG5cbmltcG9ydCB0eXBlIHsgUmVzb2x2ZXJJbmZvLCBSZXNvbHZlck1hcCB9IGZyb20gJy4uL3R5cGVzJ1xuaW1wb3J0IHsgcHJvdG9DaGFpbiB9IGZyb20gJy4vdHlwZXdvcmsnXG5cbi8qKlxuICogVGhpcyBjb25zdGFudCB0eXBlIHdoZW4gYXBwbGllZCB0byBhIFJlc29sdmVyTWFwIG9iamVjdCwgd2lsbCBiZSBwaWNrZWQgdXBcbiAqIGJ5IGBleHRyYWN0UmVzb2x2ZXJJbmZvYCBhbmQgYmUgYXBwbGllZCB0byB0aGUgdHlwZSBvbiB0aGUgZXhlY3V0YWJsZVNjaGVtYVxuICogdHlwZSdzIGBpc1R5cGVPZmAgcHJvcGVydHlcbiAqXG4gKiBAdHlwZSB7U3ltYm9sfVxuICovXG5leHBvcnQgY29uc3QgSVNfVFlQRV9PRiA9IFN5bWJvbC5mb3IoJ1Jlc29sdmVyLmlzVHlwZU9mJylcblxuLyoqXG4gKiBUaGlzIGNvbnN0YW50IHR5cGUgd2hlbiBhcHBsaWVkIHRvIGEgUmVzb2x2ZXJNYXAgb2JqZWN0LCB3aWxsIGJlIHBpY2tlZCB1cFxuICogYnkgYGV4dHJhY3RSZXNvbHZlckluZm9gIGFuZCBiZSBhcHBsaWVkIHRvIHRoZSB0eXBlIG9uIHRoZSBleGVjdXRhYmxlU2NoZW1hXG4gKiB0eXBlJ3MgYHJlc29sdmVUeXBlYCBwcm9wZXJ0eVxuICpcbiAqIEB0eXBlIHtTeW1ib2x9XG4gKi9cbmV4cG9ydCBjb25zdCBSRVNPTFZFX1RZUEUgPSBTeW1ib2wuZm9yKCdSZXNvbHZlci5yZXNvbHZlVHlwZScpXG5cbi8qKlxuICogQSBwcm9ncmFtbWF0aWMgd2F5IHRvIGRlZmluZSBhIGRlc2NyaXB0aW9uIG91dHNpZGUgb2YgU0RMLiBUaGlzIGlzIGhhbmR5XG4gKiB3aGVuIHByb3ZpZGVkIGFzIGEgZ2V0dGVyIG9uIHRoZSBzY2hlbWEncyB0eXBlIG9iamVjdC4gVGhlIGdldHRlciBnZXRzIGludm9rZWRcbiAqIGVhY2ggdGltZSB0aGUgZGVzY3JpcHRpb24gZmllbGQgaXMgYWNjZXNzZWQgYWxsb3dpbmcgZHluYW1pYyBjb250ZW50IHRvIGJlXG4gKiBwcmVzZW50ZWQgaW5zdGVhZCBvZiBzdGF0aWMgY29udGVudC4gTm90ZSB0aGF0IGxvbmcgcnVubmluZyBmdW5jdGlvbiB3b3JrXG4gKiBoZXJlIGNhbiBzbG93IGRvd24gYWxsIGl0ZW1zIHZpZXdpbmcgdGhlIGRlc2NyaXB0aW9uXG4gKlxuICogQHR5cGUge1N5bWJvbH1cbiAqL1xuZXhwb3J0IGNvbnN0IERFU0NSSVBUSU9OID0gU3ltYm9sLmZvcignUmVzb2x2ZXIuZGVzY3JpcHRpb24nKVxuXG4vKipcbiAqIFVubGlrZSBgREVTQ1JJUFRJT05gIHdoaWNoIGRlZmluZXMgdGhlIGRlc2NyaXB0aW9uIG9mIHRoZSB0eXBlLCB0aGlzIHN5bWJvbFxuICogc2hvdWxkIGFsd2F5cyBwb2ludCB0byBhbiBvYmplY3Qgd2hvc2Uga2V5cyBhcmUgdGhlIGZpZWxkIG5hbWVzIGFuZCB3aG9zZVxuICogdmFsdWVzIGFyZSB0aGUgZGVzY3JpcHRpb25zLiBTdHJpbmcgY29uc3RhbnQgdmFsdWVzIHdpbGwgYmUgY29udmVydGVkIHRvIGFcbiAqIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgY29uc3RhbnQuXG4gKlxuICogQHR5cGUge1N5bWJvbH1cbiAqL1xuZXhwb3J0IGNvbnN0IEZJRUxEX0RFU0NSSVBUSU9OUyA9IFN5bWJvbC5mb3IoJ1Jlc29sdmVyLmZpZWxkRGVzY3JpcHRpb25zJylcblxuLyoqXG4gKiBXYWxrcyBhIHJlc29sdmVycyBvYmplY3QgYW5kIHJldHVybnMgYW4gYXJyYXkgb2Ygb2JqZWN0cyB3aXRoIHNwZWNpZmljIHByb3BlcnRpZXMuXG4gKlxuICogQHBhcmFtIHtSZXNvbHZlck1hcH0gcmVzb2x2ZXJzIC0gVGhlIHJlc29sdmVycyBvYmplY3QgdG8gd2Fsay5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2RlbGV0ZUZpZWxkcz1mYWxzZV0gLSBXaGV0aGVyIHRvIGRlbGV0ZSBmaWVsZHMgdGhhdCBhcmUgY29sbGVjdGVkLlxuICogQHJldHVybnMge1Jlc29sdmVySW5mb1tdfSAtIFRoZSBhcnJheSBvZiBvYmplY3RzIHdpdGggc3BlY2lmaWVkIHByb3BlcnRpZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBleHRyYWN0UmVzb2x2ZXJJbmZvKHJlc29sdmVycywgZGVsZXRlRmllbGRzID0gZmFsc2UpIHtcbiAgY29uc3QgcmVzdWx0ID0gW107XG5cbiAgZm9yIChjb25zdCBbdHlwZSwgcmVzb2x2ZXJdIG9mIE9iamVjdC5lbnRyaWVzKHJlc29sdmVycykpIHtcbiAgICBjb25zdCBpdGVtID0geyB0eXBlIH07XG4gICAgbGV0IGluY2x1ZGUgPSBmYWxzZVxuXG4gICAgLy8gQ2hlY2sgZm9yIGlzVHlwZU9mIG9yIF9faXNUeXBlT2YgZnVuY3Rpb25cbiAgICBpZiAocmVzb2x2ZXJbSVNfVFlQRV9PRl0gfHwgcmVzb2x2ZXIuX19pc1R5cGVPZikge1xuICAgICAgaXRlbS5pc1R5cGVPZiA9IHJlc29sdmVyW0lTX1RZUEVfT0ZdIHx8IHJlc29sdmVyLl9faXNUeXBlT2Y7XG4gICAgICBpbmNsdWRlID0gdHJ1ZVxuICAgICAgaWYgKGRlbGV0ZUZpZWxkcykge1xuICAgICAgICBkZWxldGUgcmVzb2x2ZXJbSVNfVFlQRV9PRl07XG4gICAgICAgIGRlbGV0ZSByZXNvbHZlci5fX2lzVHlwZU9mO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIENoZWNrIGZvciByZXNvbHZlVHlwZSBvciBfX3Jlc29sdmVUeXBlIGZ1bmN0aW9uXG4gICAgaWYgKHJlc29sdmVyW1JFU09MVkVfVFlQRV0gfHwgcmVzb2x2ZXIuX19yZXNvbHZlVHlwZSkge1xuICAgICAgaXRlbS5yZXNvbHZlVHlwZSA9IHJlc29sdmVyW1JFU09MVkVfVFlQRV0gfHwgcmVzb2x2ZXIuX19yZXNvbHZlVHlwZTtcbiAgICAgIGluY2x1ZGUgPSB0cnVlXG4gICAgICBpZiAoZGVsZXRlRmllbGRzKSB7XG4gICAgICAgIGRlbGV0ZSByZXNvbHZlcltSRVNPTFZFX1RZUEVdO1xuICAgICAgICBkZWxldGUgcmVzb2x2ZXIuX19yZXNvbHZlVHlwZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBDaGVjayBmb3IgZGVzY3JpcHRpb24gZmllbGRcbiAgICBpZiAocmVzb2x2ZXJbREVTQ1JJUFRJT05dKSB7XG4gICAgICBpdGVtLmRlc2NyaXB0aW9uID0gdHlwZW9mIHJlc29sdmVyW0RFU0NSSVBUSU9OXSA9PT0gJ3N0cmluZydcbiAgICAgICAgPyAoKSA9PiByZXNvbHZlcltERVNDUklQVElPTl1cbiAgICAgICAgOiByZXNvbHZlcltERVNDUklQVElPTl07XG4gICAgICBpbmNsdWRlID0gdHJ1ZVxuICAgICAgaWYgKGRlbGV0ZUZpZWxkcykge1xuICAgICAgICBkZWxldGUgcmVzb2x2ZXJbREVTQ1JJUFRJT05dO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIENoZWNrIGZvciB0aGUgZmllbGQgZGVzY3JpcHRpb25zIGZpZWxkXG4gICAgaWYgKFxuICAgICAgcmVzb2x2ZXJbRklFTERfREVTQ1JJUFRJT05TXSAmJlxuICAgICAgcHJvdG9DaGFpbihyZXNvbHZlcltGSUVMRF9ERVNDUklQVElPTlNdKS5pc2EoT2JqZWN0KVxuICAgICkge1xuICAgICAgaXRlbS5maWVsZERlc2NyaXB0aW9ucyA9IHJlc29sdmVyW0ZJRUxEX0RFU0NSSVBUSU9OU11cbiAgICAgIGluY2x1ZGUgPSB0cnVlXG4gICAgICBpZiAoZGVsZXRlRmllbGRzKSB7XG4gICAgICAgIGRlbGV0ZSByZXNvbHZlcltGSUVMRF9ERVNDUklQVElPTlNdO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIE9ubHkgYWRkIGl0ZW0gdG8gcmVzdWx0IGlmIGl0IGhhcyBtb3JlIHRoYW4ganVzdCB0aGUgdHlwZSBwcm9wZXJ0eVxuICAgIGlmIChpbmNsdWRlKSB7XG4gICAgICBpdGVtLmFwcGx5VG8gPSBmdW5jdGlvbiBhcHBseVRvKHNjaGVtYSwgb3ZlcndyaXRlID0gZmFsc2UpIHtcbiAgICAgICAgaWYgKFJlZmxlY3QuaGFzKHNjaGVtYS5fdHlwZU1hcCwgdGhpcy50eXBlKSkge1xuICAgICAgICAgIGxldCB7IHJlc29sdmVUeXBlLCBpc1R5cGVPZiwgZGVzY3JpcHRpb24sIGZpZWxkRGVzY3JpcHRpb25zIH0gPSB0aGlzXG4gICAgICAgICAgbGV0IHR5cGUgPSBzY2hlbWEuX3R5cGVNYXBbdGhpcy50eXBlXVxuXG4gICAgICAgICAgaWYgKHJlc29sdmVUeXBlICYmIFJlZmxlY3QuaGFzKHR5cGUsICdyZXNvbHZlVHlwZScpKSB7XG4gICAgICAgICAgICBpZiAoIXR5cGUucmVzb2x2ZVR5cGUgfHwgb3ZlcndyaXRlKSB7XG4gICAgICAgICAgICAgIHR5cGUucmVzb2x2ZVR5cGUgPSByZXNvbHZlVHlwZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChpc1R5cGVPZiAmJiBSZWZsZWN0Lmhhcyh0eXBlLCAnaXNUeXBlT2YnKSkge1xuICAgICAgICAgICAgaWYgKCF0eXBlLmlzVHlwZU9mIHx8IG92ZXJ3cml0ZSkge1xuICAgICAgICAgICAgICB0eXBlLmlzVHlwZU9mID0gaXNUeXBlT2ZcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoZGVzY3JpcHRpb24gJiYgUmVmbGVjdC5oYXModHlwZSwgJ2Rlc2NyaXB0aW9uJykpIHtcbiAgICAgICAgICAgIGlmICghdHlwZS5kZXNjcmlwdGlvbiB8fCBvdmVyd3JpdGUpIHtcbiAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHR5cGUsICdkZXNjcmlwdGlvbicsIHtcbiAgICAgICAgICAgICAgICBnZXQ6IGRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGZpZWxkRGVzY3JpcHRpb25zICYmIFJlZmxlY3QuaGFzKHR5cGUsICdfZmllbGRzJykpIHtcbiAgICAgICAgICAgIE9iamVjdC5lbnRyaWVzKGZpZWxkRGVzY3JpcHRpb25zKS5mb3JFYWNoKChbZmllbGQsIGRlc2NyaXB0aW9uXSkgPT4ge1xuICAgICAgICAgICAgICBpZiAoIXR5cGUuX2ZpZWxkc1tmaWVsZF0/LmRlc2NyaXB0aW9uIHx8IG92ZXJ3cml0ZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGdldHRlciA9IHByb3RvQ2hhaW4oZGVzY3JpcHRpb24pLmlzYShGdW5jdGlvbilcbiAgICAgICAgICAgICAgICAgID8gZGVzY3JpcHRpb25cbiAgICAgICAgICAgICAgICAgIDogKCkgPT4gZGVzY3JpcHRpb25cblxuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0eXBlLl9maWVsZHNbZmllbGRdLCAnZGVzY3JpcHRpb24nLCB7XG4gICAgICAgICAgICAgICAgICBnZXQ6IGdldHRlcixcbiAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXN1bHQucHVzaChpdGVtKTtcbiAgICB9XG4gIH1cblxuICBpZiAocmVzdWx0Lmxlbmd0aCkge1xuICAgIHJlc3VsdC5hcHBseVRvID0gZnVuY3Rpb24gYXBwbHlUbyhzY2hlbWEsIG92ZXJ3cml0ZSA9IGZhbHNlKSB7XG4gICAgICByZXN1bHQuZm9yRWFjaChpbmZvID0+IGluZm8uYXBwbHlUbyhzY2hlbWEsIG92ZXJ3cml0ZSkpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZXh0cmFjdFJlc29sdmVySW5mb1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBR0EsSUFBQUEsU0FBQSxHQUFBQyxPQUFBO0FBSEE7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxNQUFNQyxVQUFVLEdBQUFDLE9BQUEsQ0FBQUQsVUFBQSxHQUFHRSxNQUFNLENBQUNDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQzs7QUFFekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxNQUFNQyxZQUFZLEdBQUFILE9BQUEsQ0FBQUcsWUFBQSxHQUFHRixNQUFNLENBQUNDLEdBQUcsQ0FBQyxzQkFBc0IsQ0FBQzs7QUFFOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtB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
//# sourceMappingURL=resolverwork.js.map