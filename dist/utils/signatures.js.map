{"version":3,"file":"signatures.js","names":["SIG","exports","Symbol","for","enableSignatures","Object","defineProperty","Function","prototype","get","source","toString","signature","cleanedSource","replace","startsWith","match","constructorMatch","params","trim","functionMatch","configurable","_default","default"],"sources":["../../src/utils/signatures.js"],"sourcesContent":["/** A Signature symbol that can be used to declare a non-minimized function signature */\nexport const SIG = Symbol.for('Signature')\n\n/**\n * Enables the retrieval of function or class signatures by defining a custom\n * 'signature' getter on the Function prototype. The signature encapsulates\n * the function name and parameter list, excluding any function body or comments.\n * If a function or class explicitly defines a signature via a unique Symbol key,\n * this predefined signature is returned instead of parsing the source.\n *\n * @example\n * import { SIG } from 'ne-schemata'\n *\n * function example(arg1, arg2) {}\n * example[SIG] = 'example(string, number)'\n * console.log(example.signature); // Outputs: 'example(string, number)'\n *\n * @example\n * class MyClass {\n *   constructor(arg1, arg2) {}\n * }\n * console.log(MyClass.signature); // Outputs: 'class MyClass(arg1, arg2)'\n *\n * The 'signature' getter will strip away any inline or block comments from the\n * signature. It normalizes the signature by trimming and replacing excess whitespace\n * and newlines within the parameter list with a single space, providing a clean\n * representation of the function or class signature.\n *\n * This feature is globally available once `enableSignatures` is invoked. It should\n * be noted that modifying built-in prototypes is generally discouraged as it can\n * lead to unforeseen conflicts, especially in larger code bases or when using\n * third-party libraries.\n *\n * @returns {void} This function does not return a value.\n */\nexport function enableSignatures() {\n  Object.defineProperty(Function.prototype, 'signature', {\n    get() {\n      // If the function or class has a 'Symbol.for(\"Signature\")' or SIG property, return it\n      if (this[SIG]) {\n        return this[SIG];\n      }\n\n      const source = this.toString();\n      let signature = '';\n\n      // Remove single-line and multi-line comments\n      const cleanedSource = source\n        .replace(/\\/\\/.*$/gm, '')\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//gm, '');\n\n      if (cleanedSource.startsWith('class')) {\n        // Match the class name and extend up to the constructor definition\n        signature = cleanedSource.match(/class\\s+[\\w$]+/)[0];\n        // Match the constructor and its multi-line parameters\n        const constructorMatch = cleanedSource.match(/constructor\\s*\\(([\\s\\S]*?)\\)\\s*{/);\n        if (constructorMatch) {\n          // Replace all newlines and multiple spaces with a single space\n          const params = constructorMatch[1].replace(/(\\r\\n|\\n|\\r|\\s)+/gm, ' ').trim();\n          signature += `(${params})`;\n        }\n      } else {\n        // Match the function signature (excluding the \"function\" keyword)\n        const functionMatch = cleanedSource.match(/(?:function\\s+)?([\\w$]+)\\s*\\(([\\s\\S]*?)\\)\\s*{/);\n        if (functionMatch) {\n          // Replace all newlines and multiple spaces with a single space\n          const params = functionMatch[2].replace(/(\\r\\n|\\n|\\r|\\s)+/gm, ' ').trim();\n          signature = `function ${functionMatch[1]}(${params})`;\n        }\n      }\n\n      return signature.trim();\n    },\n    configurable: true // So that it can be reconfigured or deleted if necessary\n  });\n}\n\nexport default enableSignatures\n"],"mappings":";;;;;;;AAAA;AACO,MAAMA,GAAG,GAAAC,OAAA,CAAAD,GAAA,GAAGE,MAAM,CAACC,GAAG,CAAC,WAAW,CAAC;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,gBAAgBA,CAAA,EAAG;EACjCC,MAAM,CAACC,cAAc,CAACC,QAAQ,CAACC,SAAS,EAAE,WAAW,EAAE;IACrDC,GAAGA,CAAA,EAAG;MACJ;MACA,IAAI,IAAI,CAACT,GAAG,CAAC,EAAE;QACb,OAAO,IAAI,CAACA,GAAG,CAAC;MAClB;MAEA,MAAMU,MAAM,GAAG,IAAI,CAACC,QAAQ,CAAC,CAAC;MAC9B,IAAIC,SAAS,GAAG,EAAE;;MAElB;MACA,MAAMC,aAAa,GAAGH,MAAM,CACzBI,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CACxBA,OAAO,CAAC,oBAAoB,EAAE,EAAE,CAAC;MAEpC,IAAID,aAAa,CAACE,UAAU,CAAC,OAAO,CAAC,EAAE;QACrC;QACAH,SAAS,GAAGC,aAAa,CAACG,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;QACpD;QACA,MAAMC,gBAAgB,GAAGJ,aAAa,CAACG,KAAK,CAAC,kCAAkC,CAAC;QAChF,IAAIC,gBAAgB,EAAE;UACpB;UACA,MAAMC,MAAM,GAAGD,gBAAgB,CAAC,CAAC,CAAC,CAACH,OAAO,CAAC,oBAAoB,EAAE,GAAG,CAAC,CAACK,IAAI,CAAC,CAAC;UAC5EP,SAAS,IAAI,IAAIM,MAAM,GAAG;QAC5B;MACF,CAAC,MAAM;QACL;QACA,MAAME,aAAa,GAAGP,aAAa,CAACG,KAAK,CAAC,+CAA+C,CAAC;QAC1F,IAAII,aAAa,EAAE;UACjB;UACA,MAAMF,MAAM,GAAGE,aAAa,CAAC,CAAC,CAAC,CAACN,OAAO,CAAC,oBAAoB,EAAE,GAAG,CAAC,CAACK,IAAI,CAAC,CAAC;UACzEP,SAAS,GAAG,YAAYQ,aAAa,CAAC,CAAC,CAAC,IAAIF,MAAM,GAAG;QACvD;MACF;MAEA,OAAON,SAAS,CAACO,IAAI,CAAC,CAAC;IACzB,CAAC;IACDE,YAAY,EAAE,IAAI,CAAC;EACrB,CAAC,CAAC;AACJ;AAAC,IAAAC,QAAA,GAAArB,OAAA,CAAAsB,OAAA,GAEcnB,gBAAgB","ignoreList":[]}