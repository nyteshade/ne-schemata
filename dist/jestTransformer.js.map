{"version":3,"file":"jestTransformer.js","names":["resolve","require","module","exports","process","jestTransformer","sourceText","sourcePath","config","options","source","replace","code"],"sources":["../src/jestTransformer.js"],"sourcesContent":["const { resolve } = require('path')\n\nmodule.exports = {\n  process: function jestTransformer(\n    sourceText,\n    sourcePath,\n    config,\n    options,\n  ) {\n    let source = sourceText.replace(/\\'/gm, \"\\\\'\").replace(/\\r?\\n/gm, ' ')\n\n    return { code: `\n      let { resolve, extname } = require('path')\n      let { Schemata } = require('../../dist')\n\n      let content = '${source}'\n      let schemata = new Schemata(content)\n      let schema = schemata.schema\n      let astNode = schemata.ast\n      let resolvers\n      let filename = \"${sourcePath}\"\n      let jsFilename\n      let jsModule\n\n      try {\n        jsFilename = filename.replace(extname(filename), '.js')\n        jsModule = require(resolve(jsFilename))\n        resolvers = (\n          jsModule.resolvers || typeof jsModule == 'object' && jsModule\n        )\n      }\n      catch (error) {\n        console.error(error)\n\n        process.nextTick(() => {\n          delete require.cache[resolve(jsFilename)]\n        })\n\n        resolvers = null\n      }\n\n      schemata.resolvers = resolvers\n\n      module.exports = {\n        astNode,\n        default: schemata,\n        resolvers,\n        schema,\n        sdl: schemata,\n        typeDefs: schemata\n      }\n    `}\n  }\n}\n"],"mappings":";;AAAA,MAAM;EAAEA;AAAQ,CAAC,GAAGC,OAAO,CAAC,MAAM,CAAC;AAEnCC,MAAM,CAACC,OAAO,GAAG;EACfC,OAAO,EAAE,SAASC,eAAeA,CAC/BC,UAAU,EACVC,UAAU,EACVC,MAAM,EACNC,OAAO,EACP;IACA,IAAIC,MAAM,GAAGJ,UAAU,CAACK,OAAO,CAAC,MAAM,EAAE,KAAK,CAAC,CAACA,OAAO,CAAC,SAAS,EAAE,GAAG,CAAC;IAEtE,OAAO;MAAEC,IAAI,EAAE;AACnB;AACA;AACA;AACA,uBAAuBF,MAAM;AAC7B;AACA;AACA;AACA;AACA,wBAAwBH,UAAU;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAAK,CAAC;EACJ;AACF,CAAC","ignoreList":[]}