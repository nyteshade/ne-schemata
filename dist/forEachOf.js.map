{"version":3,"file":"forEachOf.js","names":["_graphql","require","ALL","exports","TYPES","INTERFACES","ENUMS","UNIONS","SCALARS","ROOT_TYPES","INPUT_TYPES","HIDDEN","Masks","TypeMap","Map","set","GraphQLObjectType","GraphQLInterfaceType","GraphQLInputObjectType","GraphQLEnumType","GraphQLUnionType","GraphQLScalarType","forEachOf","schema","fn","context","types","forEach","t","Object","getOwnPropertySymbols","prototype","includes","Symbol","toStringTag","defineProperties","get","constructor","name","typeMap","getTypeMap","keys","typeName","type","hidden","getNamedType","startsWith","showHidden","directives","astNode","doIt","mask","getQueryType","getSubscriptionType","getMutationType","forEachField","_","_fields","fieldName","field","fieldDirectives","fieldArgs","args","_default","default"],"sources":["../src/forEachOf.js"],"sourcesContent":["// @ts-check\n\nimport {\n  getNamedType,\n  GraphQLObjectType,\n  GraphQLInterfaceType,\n  GraphQLInputObjectType,\n  GraphQLEnumType,\n  GraphQLUnionType,\n  GraphQLScalarType,\n  GraphQLType,\n  GraphQLSchema,\n} from 'graphql'\n\n/**\n * @typedef {(\n *   type: unknown,\n *   typeName: string,\n *   typeDirectives: Array<GraphQLDirective>,\n *   schema: GraphQLSchema,\n *   context: unknown\n * ) => void} ForEachOfResolver\n */\n\n /**\n  * @typedef {(\n  *   type: unknown,\n  *   typeName: string,\n  *   typeDirectives: Array<GraphQLDirective>,\n  *   field: unknown,\n  *   fieldName: string,\n  *   fieldArgs: Array<GraphQLArgument>,\n  *   fieldDirectives: Array<GraphQLDirective>,\n  *   schema: GraphQLSchema,\n  *   context: unknown\n  *  ) => void} ForEachFieldResolver\n  */\n\n// Create constants for each of the types allowed, over which one might\n// iterate. These can be bitmasked to include multiple types; i.e. for both\n// type and enums, pass TYPES | ENUMS for the types parameter. It\n// defaults to simply types.\nconst ALL = 1\nconst TYPES = 2\nconst INTERFACES = 4\nconst ENUMS = 8\nconst UNIONS = 16\nconst SCALARS = 32\nconst ROOT_TYPES = 64\nconst INPUT_TYPES = 128\nconst HIDDEN = 256\nconst Masks = [\n  ALL, TYPES, INTERFACES, UNIONS, ENUMS, SCALARS,\n  ROOT_TYPES, INPUT_TYPES\n]\nexport type BitmaskedType =\n  ALL | TYPES | INTERFACES | ENUMS | UNIONS | SCALARS | ROOT_TYPES | INPUT_TYPES | HIDDEN\n\n// Create a mapping from the constant to the GraphQL type class.\nconst TypeMap: Map<number, GraphQLType> = new Map()\nTypeMap.set(TYPES, GraphQLObjectType)\nTypeMap.set(ROOT_TYPES, GraphQLObjectType)\nTypeMap.set(INTERFACES, GraphQLInterfaceType)\nTypeMap.set(INPUT_TYPES, GraphQLInputObjectType)\nTypeMap.set(ENUMS, GraphQLEnumType)\nTypeMap.set(UNIONS, GraphQLUnionType)\nTypeMap.set(SCALARS, GraphQLScalarType)\n\n/**\n * Iterates over the values contained in a Schema's typeMap. If a desired\n * value is encountered, the supplied callback will be invoked. The values are\n * the constants ALL, TYPES, INTERFACES, ENUMS, UNIONS and SCALARS. Optionally\n * HIDDEN is another value that can be bitmasked together for a varied result.\n * HIDDEN exposes the values in the schema typemap that begin with a double\n * underscore.\n *\n * The signature for the function callback is as follows:\n * (\n *   type: unknown,\n *   typeName: string,\n *   typeDirectives: Array<GraphQLDirective>\n *   schema: GraphQLSchema,\n *   context: unknown,\n * ) => void\n *\n * Where:\n *   `type`           - the object instance from within the `GraphQLSchema`\n *   `typeName`       - the name of the object; \"Query\" for type Query and\n *                      so on.\n *   `typeDirectives` - an array of directives applied to the object or an\n *                      empty array if there are none applied.\n *   `schema`         - an instance of `GraphQLSchema` over which to iterate\n *   `context`        - usually an object, and usually the same object,\n *                      passed to the call to `makeExecutableSchema()`\n *                      or `graphql()`\n *\n * @param {GraphQLSchema} schema the schema to parse\n * @param {ForEachOfResolver} fn a function with a signature defined above\n * @param {unknown} context usually an object but any mixed value the denotes\n * some shared context as is used with the schema during normal runtime.\n * @param {number} types a bitmask of one or more of the constants defined\n * above. These can be OR'ed together and default to TYPES.\n * @return {GraphQLSchema} a new schema is generated from this SDL, iterated\n * over and returned.\n */\nfunction forEachOf(schema, fn, context, types = ALL) {\n  [\n    GraphQLObjectType, GraphQLInterfaceType, GraphQLEnumType,\n    GraphQLUnionType, GraphQLScalarType\n  ].forEach(t => {\n    if (!t) return;\n\n    if (\n      !Object.getOwnPropertySymbols(t.prototype).includes(Symbol.toStringTag)\n    ) {\n      Object.defineProperties(t.prototype, {\n        [Symbol.toStringTag]: { get() { return this.constructor.name } }\n      })\n    }\n  })\n\n  const typeMap = schema.getTypeMap();\n\n  Object.keys(typeMap).forEach(typeName => {\n    const type = typeMap[typeName];\n    const hidden = getNamedType(type).name.startsWith('__')\n    const showHidden = (types & HIDDEN) === HIDDEN\n    const directives = type && type.astNode && type.astNode.directives || []\n    let doIt = (types & ALL) === ALL\n\n    Masks.forEach(mask => {\n      if (doIt) {\n        return\n      }\n      else if (\n        (mask & ROOT_TYPES) === ROOT_TYPES\n        &&\n        (\n          type === schema.getQueryType()\n          || type === schema.getSubscriptionType()\n          || type === schema.getMutationType()\n        )\n      ) {\n        doIt = true\n        return\n      }\n      else {\n        doIt =\n          ((types & mask) === mask) &&\n          type instanceof TypeMap.get(mask)\n      }\n    })\n\n    // Prevent hidden items from being shown unless asked for\n    doIt = doIt && (!hidden || (hidden && showHidden))\n\n    if (doIt)\n      fn(type, typeName, directives, schema, context)\n  });\n}\n\n/**\n * An extension of `forEachOf` that targets the fields of the types in the\n * schema's typeMap. This function provides more detail and allows greater\n * access to any associated `context` than the function of the same name\n * provided by the `graphql-tools` library.\n *\n * The signature for the callback function is as follows\n *\n * (\n *   type: unknown,\n *   typeName: string,\n *   typeDirectives: Array<GraphQLDirective>,\n *   field: unknown,\n *   fieldName: string,\n *   fieldArgs: Array<GraphQLArgument>,\n *   fieldDirectives: Array<GraphQLDirective>,\n *   schema: GraphQLSchema,\n *   context: unknown\n * ) => void\n *\n * Where\n *\n * Where:\n *   `type`           - the object instance from within the `GraphQLSchema`\n *   `typeName`       - the name of the object; \"Query\" for type Query and so on\n *   `typeDirectives` - an array of directives applied to the object or an empty\n *                      array if there are none applied.\n *   `field`          - the field in question from the type\n *   `fieldName`      - the name of the field as a string\n *   `fieldArgs`      - an array of arguments for the field in question\n *   `fieldDirectives`- an array of directives applied to the field or an empty\n *                      array should there be no applied directives\n *   `schema`         - an instance of `GraphQLSchema` over which to iterate\n *   `context`        - usually an object, and usually the same object, passed\n *                      to the call to `makeExecutableSchema()` or `graphql()`\n *\n * @param {GraphQLSchema} schema\n * @param {ForEachFieldResolver} fn a function with a signature defined above\n * @param {unknown} context usually an object but any mixed value the denotes\n * some shared context as is used with the schema during normal runtime.\n */\nfunction forEachField(schema, fn, context, types = ALL) {\n  forEachOf(\n    schema,\n    (type, typeName, _, context, directives) => {\n      if (!type._fields) {\n        return\n      }\n\n      Object.keys(type._fields).forEach(fieldName => {\n        let field = type._fields[fieldName]\n        let fieldDirectives = field.astNode && field.astNode.directives || []\n        let fieldArgs = field.args || []\n\n        fn(\n          type,\n          typeName,\n          directives,\n          field,\n          fieldName,\n          fieldArgs,\n          fieldDirectives,\n          schema,\n          context\n        )\n      })\n    },\n    context,\n    types\n  )\n}\n\nexport {\n  ALL,\n  TYPES,\n  INTERFACES,\n  ENUMS,\n  UNIONS,\n  SCALARS,\n  ROOT_TYPES,\n  INPUT_TYPES,\n  HIDDEN,\n\n  TypeMap,\n\n  forEachOf,\n  forEachField\n}\n\nexport default forEachOf\n"],"mappings":"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","ignoreList":[]}